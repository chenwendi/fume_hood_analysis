data <- lapply(data, FUN=function(r){    #keep interval data together
if(separator!=",")  r <- gsub(separator,",",r)   #replace separators with commas
new_line <- strsplit(r,",")
data.frame(t(new_line[[1]]))
})
name_row <- as.vector(t(data[[1]]))
data <- dplyr::rbind_all(data[2:length(data)])
data
#format datetime data
if(ncol(data)==length(name_row)-1){
#date/time columns may have been combined to one column, and column names don't match
names(data) <- c("dttm",name_row[3:length(name_row)])
}else if(ncol(data)==length(name_row)){
#date/time columns are separate
date_time_check <- grepl("DATE|Date",name_row[1]) & grepl("Time|TIME",name_row[2])
if(!all(date_time_check)) warning("check date/time columns in data")
names(data) <- name_row
data$dttm <- apply( data[ ,c(1,2)] , 1 , paste , collapse = " " )
data[,1] <- NULL
data[,1] <- NULL
}else{
warning("number of data columns does not match column names")
}
data$dttm <- as.POSIXct(data$dttm, format="%m/%d/%Y %H:%M")    #date formatting
if(as.numeric(format(data$dttm[1],"%Y"))<2000){   #date formatted to wrong millenia
data$dttm <- paste0(as.numeric(substr(as.character(data$dttm),1,4)) +2000, substr(as.character(data$dttm),5,19))
data$dttm <- as.POSIXct(data$dttm, format="%Y-%m-%d %H:%M")    #date formatting
}
#relabel sash positions and format numbers
data_long <- melt(data, id.vars = "dttm")
data_long$value[data_long$value=="CLOSED"]    <- 0                                                #number formatting
data_long$value[data_long$value=="OPEN"]      <- 1                                               #number formatting
data_long$value[data_long$value=="No Data"]   <- NA                                              #number formatting
data_long$value[grepl("[a-zA-Z]",data_long$value)]   <- NA                                              #number formatting
data   <- dcast(data_long, dttm~ variable)
data   <- data.frame(dttm=data[,1],
apply(data[,2:ncol(data)],2,FUN=as.numeric))      #correct numberformatting
#name columns with hood names
data_cols <- data.frame(key=tolower(names(data)))       #some files have inconsistent capitalization between key and data
data_cols <- dplyr::left_join(data_cols, meta_key, by="key")
data_cols$hood
names(data)[!is.na(data_cols$hood)] <- data_cols$hood[!is.na(data_cols$hood)]
#format hood data
data <- original_data[date_row:(length(original_data)-1)]    #last row of report does not contain data
separator <- find_separator(data_row= data[1], min_cols= num_hoods)
data <- lapply(data, FUN=function(r){    #keep interval data together
if(separator!=",")  r <- gsub(separator,",",r)   #replace separators with commas
new_line <- strsplit(r,",")
data.frame(t(new_line[[1]]))
})
name_row <- as.vector(t(data[[1]]))
data <- dplyr::rbind_all(data[2:length(data)])
ncol(data)==length(name_row)-1
ncol(data)==length(name_row)
date_time_check <- grepl("DATE|Date",name_row[1]) & grepl("Time|TIME",name_row[2])
date_time_check
if(!all(date_time_check)) warning("check date/time columns in data")
names(data)
names(data) <- name_row
names(data)
data <- original_data[date_row:(length(original_data)-1)]    #last row of report does not contain data
separator <- find_separator(data_row= data[1], min_cols= num_hoods)
data <- lapply(data, FUN=function(r){    #keep interval data together
if(separator!=",")  r <- gsub(separator,",",r)   #replace separators with commas
new_line <- strsplit(r,",")
data.frame(t(new_line[[1]]))
})
name_row <- as.vector(t(data[[1]]))
data <- dplyr::rbind_all(data[2:length(data)])
name_row
temp            <- gsub("([[:space:]]){2,}",",",data_row)
temp            <- gsub("([[:space:]]){2,}",",",name_row)
temp
space_separated <- length(strsplit(temp, ",")[[1]])
space_separated
strsplit(temp, ",")[[1]]
strsplit(temp, ",")[[1]][1]
name_row <- sapply(name_row, FUN=function(n){}
temp            <- gsub("([[:space:]]){2,}",",",name_row)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
})
name_row <- sapply(name_row, FUN=function(n){}
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
})
name_row <- sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
})
name_row
name_row
name_rows <- sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
})
name_rows
name_rows <- unlist(sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
}))
name_rows
name_row <- unname(sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
}))
name_row
#format hood data
data <- original_data[date_row:(length(original_data)-1)]    #last row of report does not contain data
separator <- find_separator(data_row= data[1], min_cols= num_hoods)
data <- lapply(data, FUN=function(r){    #keep interval data together
if(separator!=",")  r <- gsub(separator,",",r)   #replace separators with commas
new_line <- strsplit(r,",")
data.frame(t(new_line[[1]]))
})
name_row <- as.vector(t(data[[1]]))
data <- dplyr::rbind_all(data[2:length(data)])
#col names should be a single word
name_row <- unname(sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
}))
#format datetime data
if(ncol(data)==length(name_row)-1){
#date/time columns may have been combined to one column, and column names don't match
names(data) <- c("dttm",name_row[3:length(name_row)])
}else if(ncol(data)==length(name_row)){
#date/time columns are separate
date_time_check <- grepl("DATE|Date",name_row[1]) & grepl("Time|TIME",name_row[2])
if(!all(date_time_check)) warning("check date/time columns in data")
names(data) <- name_row
data$dttm <- apply( data[ ,c(1,2)] , 1 , paste , collapse = " " )
data[,1] <- NULL
data[,1] <- NULL
}else{
warning("number of data columns does not match column names")
}
data$dttm <- as.POSIXct(data$dttm, format="%m/%d/%Y %H:%M")    #date formatting
if(as.numeric(format(data$dttm[1],"%Y"))<2000){   #date formatted to wrong millenia
data$dttm <- paste0(as.numeric(substr(as.character(data$dttm),1,4)) +2000, substr(as.character(data$dttm),5,19))
data$dttm <- as.POSIXct(data$dttm, format="%Y-%m-%d %H:%M")    #date formatting
}
#relabel sash positions and format numbers
data_long <- melt(data, id.vars = "dttm")
data_long$value[data_long$value=="CLOSED"]    <- 0                                                #number formatting
data_long$value[data_long$value=="OPEN"]      <- 1                                               #number formatting
data_long$value[data_long$value=="No Data"]   <- NA                                              #number formatting
data_long$value[grepl("[a-zA-Z]",data_long$value)]   <- NA                                              #number formatting
data   <- dcast(data_long, dttm~ variable)
data   <- data.frame(dttm=data[,1],
apply(data[,2:ncol(data)],2,FUN=as.numeric))      #correct numberformatting
#name columns with hood names
data_cols <- data.frame(key=tolower(names(data)))       #some files have inconsistent capitalization between key and data
data_cols <- dplyr::left_join(data_cols, meta_key, by="key")
data_cols$hood
names(data)[!is.na(data_cols$hood)] <- data_cols$hood[!is.na(data_cols$hood)]
data
str(data)
data_cols <- data.frame(key=tolower(names(data)))       #some files have inconsistent capitalization between key and data
data_cols
meta_key
name_row <- gsub(".","",name_row)
name_row
#format hood data
data <- original_data[date_row:(length(original_data)-1)]    #last row of report does not contain data
separator <- find_separator(data_row= data[1], min_cols= num_hoods)
data <- lapply(data, FUN=function(r){    #keep interval data together
if(separator!=",")  r <- gsub(separator,",",r)   #replace separators with commas
new_line <- strsplit(r,",")
data.frame(t(new_line[[1]]))
})
name_row <- as.vector(t(data[[1]]))
data <- dplyr::rbind_all(data[2:length(data)])
#col names should be a single word
name_row <- unname(sapply(name_row, FUN=function(n){
temp            <- gsub("([[:space:]]){2,}",",",n)
space_separated <- length(strsplit(temp, ",")[[1]])
if(space_separated==1){ return(temp)
}else{return(strsplit(temp, ",")[[1]][1])}
}))
name_row
name_row <- gsub("[:]","",name_row)
name_row
ncol(data)==length(name_row)
date_time_check <- grepl("DATE|Date",name_row[1]) & grepl("Time|TIME",name_row[2])
if(!all(date_time_check)) warning("check date/time columns in data")
name_row
names(data) <- name_row
data$dttm <- apply( data[ ,c(1,2)] , 1 , paste , collapse = " " )
data[,1] <- NULL
data[,1] <- NULL
head(data)
data$dttm <- as.POSIXct(data$dttm, format="%m/%d/%Y %H:%M")    #date formatting
if(as.numeric(format(data$dttm[1],"%Y"))<2000){   #date formatted to wrong millenia
data$dttm <- paste0(as.numeric(substr(as.character(data$dttm),1,4)) +2000, substr(as.character(data$dttm),5,19))
data$dttm <- as.POSIXct(data$dttm, format="%Y-%m-%d %H:%M")    #date formatting
}
#relabel sash positions and format numbers
data_long <- melt(data, id.vars = "dttm")
data_long$value[data_long$value=="CLOSED"]    <- 0                                                #number formatting
data_long$value[data_long$value=="OPEN"]      <- 1                                               #number formatting
data_long$value[data_long$value=="No Data"]   <- NA                                              #number formatting
data_long$value[grepl("[a-zA-Z]",data_long$value)]   <- NA                                              #number formatting
data   <- dcast(data_long, dttm~ variable)
data   <- data.frame(dttm=data[,1],
apply(data[,2:ncol(data)],2,FUN=as.numeric))      #correct numberformatting
str(data)
#name columns with hood names
data_cols <- data.frame(key=tolower(names(data)))       #some files have inconsistent capitalization between key and data
data_cols <- dplyr::left_join(data_cols, meta_key, by="key")
data_cols$hood
names(data)[!is.na(data_cols$hood)] <- data_cols$hood[!is.na(data_cols$hood)]
str(data)
source('~/Desktop/Harvard_capstone_labs/fume_hood_analysis/src/format_wide_data.R')
all_formatted_data <- etl(data_files)
saveRDS(all_formatted_data, file = paste0(wd_data,"all_formatted_data.rds"))
saveRDS(data_files, file = paste0(wd_data,"data_files.rds"))
compressed_data               <- compress_data(data_files, all_formatted_data, hood_mapping, wd_output)
compressed_data_files         <- compressed_data$compressed_data_files
compressed_all_formatted_data <- compressed_data$compressed_all_formatted_data
compressed_file_summary       <- compressed_data$compressed_file_summary
compressed_hood_summary <- calculate_hood_metrics(compressed_data_files, compressed_all_formatted_data,
compressed_file_summary, wd_output)
data_summary_temp <- compressed_hood_summary
wd_output_temp    <- wd_output
source("./visualize_data_summary_by_dept.R")
##### STEP 5: Analyse hood data at the weekly level (and save results)
weeks <- seq(from=as.POSIXct("2015-01-04"), to=Sys.time(), by=as.difftime(7, units="days"))
weeks <- weeks[weeks< max(compressed_file_summary$max_date)]
weeks <- weeks[weeks>=min(compressed_file_summary$min_date)]
#summarize and plot every available hood-week combination
weekly_data_files     <- compressed_data_files
weekly_hood_summary_w <- list()
for(w in 1:(length(weeks)-1)){
print(w)
weekly_formatted_data <- reduce_timeframe_hood_data(all_data_summary=compressed_file_summary,
all_formatted_data=compressed_all_formatted_data,
start=weeks[w], end=weeks[w+1])
weekly_file_summary <- calculate_file_metrics(all_formatted_data=weekly_formatted_data, data_files=weekly_data_files)
weekly_hood_summary <- calculate_hood_metrics(weekly_data_files, weekly_formatted_data, weekly_file_summary,
wd_output=paste0(wd_output,"reduced",w,"_"))
weekly_hood_summary_w[[length(weekly_hood_summary_w)+1]] <- data.frame(weekly_hood_summary, wk=w)
}
weekly_hood_summary <- dplyr::rbind_all(weekly_hood_summary_w)
write.csv(weekly_hood_summary, paste0(wd_output,"weekly_hood_summary.csv"))
#### STEP 6: Sampling of fume hoods for analysis, visualization of sampled hoods
groups <- unique(compressed_hood_summary$dept)
sample_size <- 30   #number of hoods per group
sampled_data_summary <- lapply(groups, FUN=function(g){      #this step already done, don't resample
data_subset   <- compressed_hood_summary %>% filter(dept==g)
data_sample_g <- dplyr::sample_n(data_subset, size=sample_size, replace = TRUE)
})
sampled_data_summary <- dplyr::rbind_all(sampled_data_summary)
write.csv(sampled_data_summary[,c("hood", "dept")], paste0(wd_output,"sampled_data_summary.csv"), row.names=FALSE)
# from sampled hoods, get complete weekly data for analysis in paper
sampled_data_summary <- read.csv(paste0(wd_output,"sampled_data_summary.csv"))
sampled_data_summary$sample <- 1:nrow(sampled_data_summary)
sampled_data_analysis <- weekly_hood_summary %>%
filter(hood %in% sampled_data_summary$hood) %>%
filter(days>6) %>%
select(-file)
sampled_data_analysis<-dplyr::left_join(sampled_data_summary[,c("hood","sample")],sampled_data_analysis,by="hood")
# for each fume hood, sample 1 complete week
samples <- unique(sampled_data_analysis$sample)
sample_data <- lapply(samples, FUN=function(s){
s_data <- sampled_data_analysis %>% filter(sample==s)
s_datarow <- dplyr::sample_n(s_data, size = 1)
})
sample_data <- dplyr::rbind_all(sample_data)
write.csv(sample_data, paste0(wd_output,"sample_data.csv"))
##### prepare to anonymize data for report
#table showing number of hoods in each building
hoods <- hood_mapping %>% filter(exclude==FALSE)
table(hoods$dept)
#map labs to different names for anonymity
lab_mapping <- data.frame(lab=c(setdiff(unique(hoods$lab),c("bio", "esl","fairchild")),c("bio", "esl","fairchild")))
lab_mapping$lab_num <- 1:nrow(lab_mapping)
lab_mapping$lab_name <- paste0("lab_",letters[lab_mapping$lab_num])
lab_mapping$lab_name[lab_mapping$lab %in% c("bio", "esl","fairchild")] <- lab_mapping$lab[lab_mapping$lab %in% c("bio", "esl","fairchild")]
source('~/Desktop/Harvard_capstone_labs/fume_hood_analysis/report_visuals.R')
y_label_pos <- 30
source('~/Desktop/Harvard_capstone_labs/fume_hood_analysis/report_visuals.R')
# "sampled_data_summary" is a df with sampled hood info only
# "sample_data" is a hood summary with sampled hood-weeks in each row
##### prepare to anonymize data for report
#table showing number of hoods in each building
hoods <- hood_mapping %>% filter(exclude==FALSE)
table(hoods$dept)
#map labs to different names for anonymity
lab_mapping <- data.frame(lab=c(setdiff(unique(hoods$lab),c("bio", "esl","fairchild")),c("bio", "esl","fairchild")))
lab_mapping$lab_num <- 1:nrow(lab_mapping)
lab_mapping$lab_name <- paste0("lab_",letters[lab_mapping$lab_num])
lab_mapping$lab_name[lab_mapping$lab %in% c("bio", "esl","fairchild")] <- lab_mapping$lab[lab_mapping$lab %in% c("bio", "esl","fairchild")]
#anonymize hood data
sample_data <- dplyr::left_join(sample_data, hood_mapping, by="hood")
sample_data$new_lab_name <- sapply(sample_data$lab, FUN=function(n){lab_mapping$lab_name[which(lab_mapping$lab==n)]})
#begin to produce visuas
wd_output_temp <- paste0(wd_output)
pdf(paste0(wd_output_temp,"report_visuals.pdf"), width=8, height=4)
y_label_pos <- 32
######figure data availability#####
plot_file_summary <- compressed_file_summary %>%
mutate(min_date=as.POSIXct(as.Date(min_date)), max_date=as.POSIXct(as.Date(max_date))) %>%
group_by(min_date, max_date, dept) %>%
dplyr::summarize(count=n())
plot_file_summary <- plot_file_summary[order(plot_file_summary$dept, decreasing=TRUE),]
plot_file_summary$file <- 1:nrow(plot_file_summary)
plot_file_summary <- plot_file_summary[,c("file", "min_date", "max_date", "dept", "count")]   #reorder columns
plot_a <- ggplot(plot_file_summary) + geom_segment(aes(y = file,yend = file, x = min_date, xend =max_date, color=dept,fill=dept), size=3)  +
theme_minimal() + ggtitle("Data Availability Over Time") +
scale_x_datetime(breaks = date_breaks("7 day"), labels=date_format("%b-%d")) + xlab("Week")
plot_a <- plot_a + geom_text(aes(x = min_date+as.difftime(4, units="days"), y = file+0.3, label = paste(count, "hoods")), size=4)
print(plot_a)
####compare sample to population####
if(!"lab" %in% names(sampled_data_summary)) sampled_data_summary <- dplyr::left_join(sampled_data_summary, hood_mapping, by=c("hood", "dept"))
plot_sample_data <- sampled_data_summary %>% filter(dept=="chem")
plot_sample_data$new_lab_name <- unlist(sapply(plot_sample_data$lab, FUN=function(n){lab_mapping$lab_name[which(lab_mapping$lab==n)]}))
plot_a <- ggplot(plot_sample_data) + geom_bar(aes(y=..count.., x=new_lab_name)) +
xlab("Labs")+ ylab("Number of hoods in sample")+
theme_minimal()
suppressWarnings(print(plot_a))
plot_compressed_data <- compressed_hood_summary %>% filter(dept=="chem")
plot_compressed_data$new_lab_name <- unlist(sapply(plot_compressed_data$lab, FUN=function(n){lab_mapping$lab_name[which(lab_mapping$lab==n)]}))
plot_a <- ggplot(plot_compressed_data) + geom_bar(aes(y=..count.., x=new_lab_name)) +
xlab("Labs")+ ylab("Number of hoods in population")+
theme_minimal()
suppressWarnings(print(plot_a))
## hood data descriptors
plot_data <- compressed_hood_summary %>% filter(dept=="chem")
means <- round(c(mean(plot_data$min_v), mean(plot_data$max_v)))
plot_a <- ggplot(plot_data) + theme_minimal() +
geom_boxplot(aes(x="min", y=min_v))  + geom_boxplot(aes(x="max", y=max_v)) +
ylab("CFM") + xlab("Ventilation rate descriptors") +
geom_text(aes(x = c("min"),  y = -200,  label = paste("mean =",means[1])), size=5) +
geom_text(aes(x = c("max"),  y = -200,  label = paste("mean =",means[2])), size=5)
suppressWarnings(print(plot_a))
####show pct na in sampled data
sample_data$na_groups <- "[0]"   #no extended intervals
sample_data$na_groups[sample_data$pct_na > 0]    <- "(0,0.33)"   #no extended intervals
sample_data$na_groups[sample_data$pct_na >= 0.33] <- "[0.33,0.66)"
sample_data$na_groups[sample_data$pct_na >= 0.66] <- "[0.66,1]"
sample_data$na_groups <-  factor(sample_data$na_groups,
levels=c("[0]", "(0,0.33)", "[0.33,0.66)", "[0.66,1]"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(pct_na, na.rm=T),3))
cbPalette <- c("#999999", "#009E73", "#F0E442", "#E69F00")
plot_a <- ggplot() +geom_bar(data=sample_data,aes(x=dept, fill=na_groups)) + scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count") +
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
table(sample_data$na_groups, sample_data$dept)
###### classify occupant behavior#####
sample_data$occ_behavior <- "no activity"   #no extended intervals
sample_data$occ_behavior[sample_data$pct_open > 0] <- "good"   #no extended intervals
sample_data$occ_behavior[sample_data$openings_over_5>0 & sample_data$openings_over_24==0] <- "mediocre"
sample_data$occ_behavior[sample_data$openings_over_24>0] <- "poor"
sample_data$occ_behavior <-  factor(sample_data$occ_behavior,
levels=c("no activity", "good", "mediocre", "poor"))
cbPalette <- c("#999999", "#009E73", "#F0E442", "#E69F00")
plot_a <- ggplot() +geom_bar(data=sample_data, aes(x=dept, fill=occ_behavior)) + scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")
suppressWarnings(print(plot_a))
table(sample_data$occ_behavior, sample_data$dept)
####score distribution of scores
sample_data$score_groups <- "[0]"   #no extended intervals
sample_data$score_groups[sample_data$score > 0] <- "(0,75)"   #no extended intervals
sample_data$score_groups[sample_data$score >= 75] <- "[75,150)"
sample_data$score_groups[sample_data$score >= 150] <- "[150,225)"
sample_data$score_groups[sample_data$score >= 225] <- "[225,300)"
sample_data$score_groups <-  factor(sample_data$score_groups,
levels=c("[0]" ,"(0,75)", "[75,150)", "[150,225)", "[225,300)"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(score, na.rm=T),3))
cbPalette <- c("#999999", "#009E73","#56B4E9",  "#F0E442", "#E69F00")
plot_a <- ggplot(sample_data) +geom_bar(aes(x=dept, fill=score_groups)) + scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")+
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
### med_open_hours
sample_data$med_open_hours_group <- "[0]"   #no extended intervals
sample_data$med_open_hours_group[sample_data$med_opening_hrs > 0] <- "(0,5)"   #no extended intervals
sample_data$med_open_hours_group[sample_data$med_opening_hrs >= 5] <- "[5,24)"
sample_data$med_open_hours_group[sample_data$med_opening_hrs >= 24] <- "[24,72)"
sample_data$med_open_hours_group[sample_data$med_opening_hrs >= 72] <- "[100,168]"
sample_data$med_open_hours_group <-  factor(sample_data$med_open_hours_group,
levels=c("[0]", "(0,5)", "[5,24)", "[24,72)", "[100,168]"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(med_opening_hrs, na.rm=T),3))
cbPalette <- c("#999999", "#009E73","#56B4E9",  "#F0E442", "#E69F00")
plot_a <- ggplot() +geom_bar(data=sample_data, aes(x=dept, fill=med_open_hours_group)) +
scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")+
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
### pct_open
sample_data$pct_open_group <- "[0]"   #no extended intervals
sample_data$pct_open_group[sample_data$pct_open > 0] <- "(0,0.25)"   #no extended intervals
sample_data$pct_open_group[sample_data$pct_open >= 0.25] <- "[0.25,0.5)"
sample_data$pct_open_group[sample_data$pct_open >= 0.5] <- "[0.5,0.75)"
sample_data$pct_open_group[sample_data$pct_open >= 0.75] <- "[0.75,1]"
sample_data$pct_open_group <-  factor(sample_data$pct_open_group,
levels=c("[0]", "(0,0.25)", "[0.25,0.5)", "[0.5,0.75)", "[0.75,1]"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(pct_open, na.rm=T),3))
cbPalette <- c("#999999", "#009E73","#56B4E9",  "#F0E442", "#E69F00")
plot_a <- ggplot(sample_data) +geom_bar(aes(x=dept, fill=pct_open_group)) +
scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")+
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
### pct_open_under_5
sample_data$pct_open_under_5_group <- "[0]"   #no extended intervals
sample_data$pct_open_under_5_group[sample_data$pct_open_under_5 > 0] <- "(0,0.15)"   #no extended intervals
sample_data$pct_open_under_5_group[sample_data$pct_open_under_5 >= 0.15] <- "[0.15,0.3)"
sample_data$pct_open_under_5_group <-  factor(sample_data$pct_open_under_5_group,
levels=c("[0]", "(0,0.15)", "[0.15,0.3)"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(pct_open_under_5, na.rm=T),3))
cbPalette <- c("#999999", "#009E73","#56B4E9",  "#F0E442", "#E69F00")
plot_a <- ggplot(sample_data) +geom_bar(aes(x=dept, fill=pct_open_under_5_group)) +
scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")+
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
### pct_exceeding_5
sample_data$pct_open_exceeding_5_group <- "[0]"   #no extended intervals
sample_data$pct_open_exceeding_5_group[sample_data$pct_exceeding_5 > 0] <- "(0,.25)"   #no extended intervals
sample_data$pct_open_exceeding_5_group[sample_data$pct_exceeding_5 >= 0.25] <- "[0.25,0.5)"
sample_data$pct_open_exceeding_5_group[sample_data$pct_exceeding_5 >= 0.5] <- "[0.5,0.75)"
sample_data$pct_open_exceeding_5_group[sample_data$pct_exceeding_5 >= 0.75] <- "[0.75,1]"
sample_data$pct_open_exceeding_5_group <-  factor(sample_data$pct_open_exceeding_5_group,
levels=c("[0]", "(0,.25)", "[0.25,0.5)", "[0.5,0.75)", "[0.75,1]"))
summary <- sample_data %>% group_by(dept) %>% dplyr::summarize(avg=round(mean(pct_exceeding_5, na.rm=T),3))
cbPalette <- c("#999999", "#009E73","#56B4E9",  "#F0E442", "#E69F00")
plot_a <- ggplot(sample_data) +geom_bar(aes(x=dept, fill=pct_open_exceeding_5_group)) +
scale_fill_manual(values=cbPalette) +
theme_minimal()+xlab("Department")+ylab("Count")+
geom_text(data=summary, aes(x = dept, y = y_label_pos, label = paste("mean:",avg)))  #add labels
suppressWarnings(print(plot_a))
####
ggplot(sample_data, aes(x=dept,y=pct_exceeding_5)) + theme_minimal() +  geom_boxplot() +
geom_point(position="jitter")  + coord_flip() + xlab("")
ggplot(sample_data, aes(x=pct_exceeding_5, fill=dept)) + theme_minimal() + geom_density(alpha=0.1) + xlab("")
## investigating metrics here
sample_data[,c("sample", "dept" ,"med_opening_hrs","pct_open")]
t(sample_data[3,])
#get group stats, 95% confidence interval
group_summary <- summarize_groups(data=sample_data, value="pct_exceeding_5", grouping_var="dept")
print(group_summary)
#compare each pair of groupds for significant differences
fit <- aov(pct_exceeding_5 ~ dept, data=sample_data)
TukeyHSD(fit)
#
# #to do: convert tables to xtable
# library(xtable)
# data(tli)
# xt <- xtable(tli[1:10,])
# digits(xt)[c(2,6)] <-0
# print(xt, type="html")
#calculate average flow
means <- round(c(mean(plot_data$min_v), mean(plot_data$max_v)))
no_treatment_hoods <- compressed_hood_summary %>% filter(dept %in% c("esl"))
avg_pct_open <- mean(no_treatment_hoods$pct_open, na.rm=T)
# avg_pct_open <- 0.04
avg_flow <- means[1]*(1-avg_pct_open)+ means[2]*(avg_pct_open)
print(avg_flow)
typical_cfm_difference <-600
mean_pct_exceeding_5_high <- 0.441
mean_pct_exceeding_5_low <- 0.058
graphics.off()
closeAllConnections()
TukeyHSD(fit)
week_comparison <- sampled_data_analysis       #this dataframe has all weeks for the sampled hoods
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
week_comparison <- week_comparison %>%
filter(dept=="chem")
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
ggplot(week_comparison) +
geom_point(aes(x=wk, y=pct_exceeding_5, color=hood)) +
geom_line(aes(x=wk, y=pct_exceeding_5, color=hood))
week_comparison <- sampled_data_analysis       #this dataframe has all weeks for the sampled hoods
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
week_comparison <- week_comparison %>%
filter(dept=="bio")
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
ggplot(week_comparison) +
geom_point(aes(x=wk, y=pct_exceeding_5, color=hood)) +
geom_line(aes(x=wk, y=pct_exceeding_5, color=hood))
week_comparison <- sampled_data_analysis       #this dataframe has all weeks for the sampled hoods
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
week_comparison <- week_comparison %>%
filter(dept=="sf")
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
ggplot(week_comparison) +
geom_point(aes(x=wk, y=pct_exceeding_5, color=hood)) +
geom_line(aes(x=wk, y=pct_exceeding_5, color=hood))
week_comparison <- sampled_data_analysis       #this dataframe has all weeks for the sampled hoods
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
week_comparison <- week_comparison %>%
filter(dept=="fairchild")
week_comparison <- dplyr::left_join(week_comparison, hood_mapping, by="hood")
ggplot(week_comparison) +
geom_point(aes(x=wk, y=pct_exceeding_5, color=hood)) +
geom_line(aes(x=wk, y=pct_exceeding_5, color=hood))
